{
  "postTitle": "XGH - eXtreme Go Horse",
  "timestamp": "1595064085",
  "editedTimestamp": "",
  "postContent": "<p>You heard of Scrum and XP, now it's time to learn about <strong>Extreme Go Horse</strong>.<br><span class=\"text-tiny\"><i>Before we begin: This is satire. I know some things listed here happen in real life (and quite often!) but let's laugh a bit, shall we?</i></span></p><p>&nbsp;</p><ul><li>1. If you had to think, it's not XGH.<br>XGH doesn't think, it does the first thing that comes to mind. There is no second option, the only option is the fastest one.<br>&nbsp;</li><li>2. There are 3 ways to solve a problem, the right one, the wrong one and the XGH one, which is the same as the wrong one, but faster.<br>XGH is faster than any software development methodology you know (see Axiom 14).<br>&nbsp;</li><li>3. The more XGH you do, the more you need to do.<br>For each problem solved using XGH, a further 7 are created. But they will all be solved the XGH way. XGH tends to infinity.<br>&nbsp;</li><li>4. XGH is fully reactive.<br>Errors only exist when they appear.<br>&nbsp;</li><li>5. XGH is worth everything, just not worth your ass.<br>Solved the problem? Did it compile? Commit and that was it.<br>&nbsp;</li><li>6. Always commit before update.<br>If it breaks, your code will always be right and f*ck everyone else.<br>&nbsp;</li><li>7. XGH has no deadline.<br>The deadlines passed by your customer are mere details. You will ALWAYS be able to implement EVERYTHING in the required time (even if it means accessing the DB through a bad script).<br>&nbsp;</li><li>8. Be prepared to jump off when the boat starts to sink… Or put the blame on someone or something.<br>For those who use XGH, one day the boat will sink. The more time goes by, the more the system becomes a monster. The day the building burns down, it's best to have your resume ready, or have something to blame.<br>&nbsp;</li><li>9. Be authentic, XGH doesn't respect standards.<br>Write the code as you please, if you solve the problem, commit and that was it.<br>&nbsp;</li><li>10. There is no refactoring, just rework.<br>If it sucks, redo with a quick XGH that solves the problem. The day a rework implies rewriting the entire application, jump off! Because the boat will sink (See Axiom 8).<br>&nbsp;</li><li>11. XGH is totally anarchic.<br>The figure of a project manager is totally disposable. It has no owner, everyone does what they want when the problems and requirements arise (See Axiom 4).<br>&nbsp;</li><li>12. Always delude yourself with promises of improvement.<br>Putting TODO in the code as a promise of improvement helps the XGH developer not feel remorse or blame for the shit he did. Of course refactoring will never be done (see Axiom 10).<br>&nbsp;</li><li>13. XGH is absolute, does not hold against relative things.<br>Time and cost are absolute, quality is totally relative. Never think about the quality but about the shortest time the solution can be implemented, by the way… don't think, do it!<br>&nbsp;</li><li>14. XGH is timeless.<br>Scrum, XP… This is all bullshit. XGH is not about the fads of the moment, that's a thing for losers. XGH has always been and always will be used by those who despise quality.<br>&nbsp;</li><li>15. XGH is not always WOP. (Workaround Oriented Programming)<br>Many WOPs require very high thinking, XGH has no reason or rhyme (See Axiom 1).<br>&nbsp;</li><li>16. Don't try to row against the tide.<br>If your coworkers use XGH for programming and you're a dimwit who likes to do the right thing, forget it! For each Design Pattern you use correctly, your colleagues will generate 10 times more rotten code using XGH.<br>&nbsp;</li><li>17. XGH is not dangerous until a little bit of organization comes.<br>This axiom is very complex, but it suggests that the project using XGH is in chaos. Do not try order in XGH (See Axiom 16), it is useless and you can throw precious time in the trash. This will make the project sink even faster (See Axiom 8). Do not try to manage XGH, it is self sufficient (See Axiom 11) as organizational chaos is.<br>&nbsp;</li><li>18. XGH is your brother, but it's vindictive<br>As long as you want, XGH will always be by your side. But be careful, do not abandon it. If you start a system using XGH and abandon it to use a fashionable methodology, you're f*cked. XGH does not allow refactoring (see Axiom 10), and its new system full of frills will collapse. And at this time, only XGH can save it.<br>&nbsp;</li><li>19. If it works, don't touch it.<br>Never change, let alone question working code. This is a waste of time, even more because refactoring does not exist (see Axiom 10). Time is the gear that drives XGH and quality is a negligible detail.<br>&nbsp;</li><li>20. Tests are for the weak.<br>If you got your hands on an XGH system, you better know what you are doing. And if you know what you're doing, what are you going to test for? Testing is a waste of time, if the code compiles, it's enough.<br>&nbsp;</li><li>21. Get used to the feeling of imminent failure.<br>Failure and success always go hand in hand, and with XGH it's no different. People often find that the chances of the project failing using XGH are always greater than being successful. But success and failure are a matter of point of view. The project went downhill, but did you learn anything? So it was a success for you!<br>&nbsp;</li><li>22. The problem is yours only when your name is in the class documentation.<br>Never get your hands on a class whose author is not you. If a team member dies or becomes ill for a long time, the boat will sink! In that case, use Axiom 8.<br>&nbsp;</li></ul><p>The original (in Portuguese) you can find <a href=\"https://gohorseprocess.com.br/extreme-go-horse-xgh/\">here</a>. Translated by me! Translated this one because I've never seen it in English.</p>",
  "filename": "xgh-extreme-go-horse",
  "draft": false
}